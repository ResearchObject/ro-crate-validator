<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MetadataExampleComplete" xml:space="preserve">
    <value>{"@context":"https://w3id.org/ro/crate/0.2-DRAFT/context","@graph":[{"@id":"ro-crate-metadata.jsonld","about":{"@id":"."},"additionalType":{"@id":"https://w3id.org/ro/crate/0.2-DRAFT/"},"creator":{"@id":"https://orcid.org/0000-0001-9842-9718"}},{"@type":["Dataset"],"@id":".","path":"./","name":"RetroPath2.0 IBISBA workflow node","datePublished":"2019-02-14","contactPoint":{"@id":"#contact"},"creator":[{"@id":"#thomas"},{"@id":"#stefan"}],"license":{"@id":"http://creativecommons.org/licenses/by-nc-sa/4.0/"},"cite-as":{"@id":"https://doi.org/10.1016/j.ymben.2017.12.002"},"distribution":{"@id":"https://github.com/ibisba/RetroPath2-cwl/archive/master.zip"},"publisher":{"@id":"https://www.ibisba.eu/"},"description":"RetroPath2.0 builds a reaction network from a set of source compounds to a set of sink compounds. When applied in a retrosynthetic fashion, the source is composed of the target compounds and the sink is composed of the available reactants (for instance in the context of metabolic engineering the sink is the set of native metabolites of a chassis strain). From amongst all the chemical reactions generated using RetroPath2.0 (in the retrosynthetic way), only a subset may effectively link a source to a subset of sink compounds. This sub-network is considered as a scope and is output in dedicated files.","keywords":"workflow, knime, CWL, reaction","sdPublisher":{"@id":"http://researchobject.org/","name":"Research Object community"},"sdLicense":{"@id":"https://www.apache.org/licenses/LICENSE-2.0"},"subjectOf":{"@id":"README.md"},"hasPart":[{"@id":"workflow/workflow.knime"},{"@id":"workflow/"},{"@id":"tools/RetroPath2.cwl"},{"@id":"workflow/workflow.svg"},{"@id":"Dockerfile"},{"@id":"test/test.sh"},{"@id":"README.md"}]},{"@id":"#contact","@type":"ContactPoint","email":"support@esciencelab.org.uk"},{"@id":"#thomas","@type":"Person","name":"Thomas Duigou","email":"thomas.duigou@inra.fr"},{"@id":"#stefan","@type":"Person","name":"Stefan Helfrich","url":{"@id":"https://github.com/stelfrich"}},{"@id":"https://orcid.org/0000-0001-9842-9718","@type":"Person","name":"Stian Soiland-Reyes","url":{"@id":"https://orcid.org/0000-0001-9842-9718"}},{"@id":"https://github.com/ibisba/RetroPath2-cwl/archive/master.zip","@type":"DataDownload","contentUrl":"https://github.com/ibisba/RetroPath2-cwl/archive/master.zip","encodingFormat":"application/zip"},{"@id":"https://www.ibisba.eu/","@type":"Organization","name":"IBISBA","url":{"@id":"https://www.ibisba.eu/"}},{"@id":"workflow/workflow.knime","@type":"SoftwareSourceCode","additionalType":{"@id":"wfdesc:Workflow"},"name":"RetroPath 2.0 Knime workflow","description":"KNIME implementation of RetroPath2.0 workflow","creator":{"@id":"#thomas"},"programmingLanguage":{"@id":"#knime"},"potentialAction":{"@type":"ActivateAction","instrument":{"@id":"#knime"}}},{"@id":"workflow/","@type":"Dataset","additionalType":{"@id":"roterms:ExampleRun"},"description":"Example of KNIME workspace after executing RetroPath2.0 workflow","exampleOfWork":{"@id":"workflow/workflow.knime"},"potentialAction":{"@type":"ViewAction","instrument":{"@id":"#knime"}}},{"@id":"tools/RetroPath2.cwl","@type":"SoftwareSourceCode","additionalType":{"@id":"wfdesc:Workflow"},"name":"RetroPath 2.0 CWL workflow","programmingLanguage":{"@id":"https://w3id.org/cwl/v1.0/"},"description":"CWL tool wrapper that execute KNIME workflow using its Docker image","creator":{"@id":"#stefan"},"potentialAction":{"@type":"ActivateAction","instrument":{"@id":"#cwltool"}},"codeRepository":{"@id":"https://github.com/ibisba/RetroPath2-cwl/"},"wasDerivedFrom":{"@id":"workflow/workflow.knime"}},{"@id":"workflow/workflow.svg","@type":"ImageObject","additionalType":{"@id":"roterms:Sketch"},"encodingFormat":"image/svg+xml","description":"Diagram of RetroPath2.0 workflow","about":{"@id":"workflow/workflow.knime"},"wasDerivedFrom":{"@id":"workflow/workflow.knime"}},{"@id":"Dockerfile","@type":"SoftwareSourceCode","url":{"@id":"https://hub.docker.com/r/ibisba/retropath2/"},"description":"Docker image of KNIME workflow (including KNIME runtime)","creator":{"@id":"#stefan"},"importedFrom":[{"@id":"workflow/workflow.knime"},{"@id":"#knime-docker"}]},{"@id":"test/test.sh","@type":"SoftwareSourceCode","additionalType":{"@id":"wf4ever:Script"},"description":"Test script that validate the CWL description (should ideally execute workflow with test inputs)"},{"@id":"#knime-docker","@type":"SoftwareApplication","name":"ibisba/knime-workflow-base:3.6.2-1","url":{"@id":"https://hub.docker.com/r/ibisba/knime-workflow-base/"},"description":"KNIME workflow base Docker image","version":"3.6.2-1"},{"@id":"#knime","@type":["ComputerLanguage","SoftwareApplication"],"name":"KNIME Analytics Platform","alternateName":"KNIME","url":{"@id":"https://www.knime.com/knime-software/knime-analytics-platform"},"version":"3.6"},{"@id":"#cwltool","@type":"SoftwareApplication","name":"cwltool","description":"Common Workflow Language reference implementation","url":{"@id":"https://github.com/common-workflow-language/cwltool/"},"version":"1.0.20190618201008","cite-as":{"@id":"https://doi.org/10.5281/zenodo.3250191"}},{"@id":"https://w3id.org/cwl/v1.0/","@type":"ComputerLanguage","name":"Common Workflow Language","alternateName":"CWL","identifier":{"@id":"https://w3id.org/cwl/v1.0/"},"url":{"@id":"https://www.commonwl.org/"},"version":"1.0","cite-as":{"@id":"https://doi.org/10.6084/m9.figshare.3115156.v2"}}]}</value>
  </data>
</root>